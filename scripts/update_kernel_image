#!/usr/bin/env bash
set -euo pipefail


SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
ARGPARSE_DESCRIPTION="Update the kernel sector or/and the device tree sector in BLOCK_DEVICE or DISK_IMAGE with the KERNEL_IMAGE or/and the DEVICE_TREE_IMAGE file."
source "$SCRIPT_DIR/argparse.bash" || exit 1
argparse "$@" <<EOF || exit 1
parser.epilog = "example: %(prog)s -y -k ./Image -t ./dt.img -b /dev/sdc"
parser.add_argument('-y', '--assume-yes', action='store_true', help='assume "yes" as answer to all prompts and run non-interactively')
parser.add_argument('-k', '--kernel-image', default='', help='path of the kernel image file, i.e., ./Image')
parser.add_argument('-t', '--device-tree-image', default='', help='path of the device tree image file, i.e., ./dt.img')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-b', '--block-device', help='path of the block device, i.e., /dev/sdc')
group.add_argument('-d', '--disk-image', help='path of the disk image file, i.e., ./qingyun.img')
EOF


function ask_to_continue {
    prompt=$1
    assume_yes=$2

    if [[ "$assume_yes" != 'yes' ]]; then
        read -p "$prompt [Y/n]" confirm
        if [[ "$confirm" == '' || "$confirm" == [yY] || "$confirm" == [yY][eE][sS] ]]; then
            :
        else
            echo "Aborted."
            exit 0
        fi
    fi
}


function main {
    # prepare the block device
    USER_CHOICE=''
    if [[ -e "$BLOCK_DEVICE" ]]; then
        DISK_IMAGE=
        echo "sudo permission is required."
        sudo lsblk "$BLOCK_DEVICE"
        DEV_NAME="$BLOCK_DEVICE"
        USER_CHOICE='BLOCK_DEVICE'
    elif [[ -e "$DISK_IMAGE" ]]; then
        BLOCK_DEVICE=
        echo "Finding the first unused loop device..."
        echo "sudo permission is required."
        loop_dev="$(sudo losetup -f)"
        echo "[OK]"
        echo "Associating loop device '$loop_dev' with image file '$DISK_IMAGE'..."
        sudo losetup --partscan "$loop_dev" "$DISK_IMAGE"
        echo "[OK]"
        DEV_NAME="$loop_dev"
        USER_CHOICE='DISK_IMAGE'
    else
        >&2 echo "[ERROR] You must specify a valid BLOCK_DEVICE or DISK_IMAGE."
        echo "The provided BLOCK_DEVICE is '$BLOCK_DEVICE'."
        echo "The provided DISK_IMAGE is '$DISK_IMAGE'."
        exit 1
    fi

    # check if the images are valid
    if [[ -z "$KERNEL_IMAGE" ]]; then
        echo "No KERNEL_IMAGE is specified. The kernel sector in device will not be updated."
    else
        if [[ ! -e "$KERNEL_IMAGE" ]]; then
            >&2 echo "[ERROR] KERNEL_IMAGE '$KERNEL_IMAGE' does not exist."
            exit 1
        fi
    fi

    if [[ -z "$DEVICE_TREE_IMAGE" ]]; then
        echo "No DEVICE_TREE_IMAGE is specified. The device tree sector in device will not be updated."
    else
        if [[ ! -e "$DEVICE_TREE_IMAGE" ]]; then
            >&2 echo "[ERROR] DEVICE_TREE_IMAGE '$DEVICE_TREE_IMAGE' does not exist."
            exit 1
        fi
    fi

    # try
    set +e; ( set -e; trap 'exit 1' SIGINT;

        # get device info
        sectorEnd=`sudo fdisk -l | grep "$DEV_NAME:" | awk -F ' ' '{print $7}'`
        sectorSize=`sudo fdisk -l | grep -A 2 "$DEV_NAME:" | grep "Units" | awk -F ' ' '{print $6}'`
        partitions_num=$(ls /sys/block/"$(basename $DEV_NAME)"/*/partition | wc -l)
        if [[ "$sectorSize" -ne 512 ]]; then
            >&2 echo "[ERROR] Sector size is not 512!"
            exit 1;
        fi

        # calculate component main/backup offset
        if [[ $partitions_num -eq 1 ]]; then
            # for the single-partition fs
            sectorOffset_1M=$(( 1024*1024/sectorSize ))
            COMPONENTS_MAIN_OFFSET=$sectorOffset_1M
        else
            # 536870912 bytes is 512M
            sectorRsv=$(( 536870912/sectorSize+1 ))
            COMPONENTS_MAIN_OFFSET=$(( sectorEnd-sectorRsv+1 ))
        fi
        COMPONENTS_BACKUP_OFFSET=$(( COMPONENTS_MAIN_OFFSET+73728 ))
        echo "COMPONENTS_MAIN_OFFSET=$COMPONENTS_MAIN_OFFSET"
        echo "COMPONENTS_BACKUP_OFFSET=$COMPONENTS_BACKUP_OFFSET"

        # dump data to the block device
        if [[ -e "$DEVICE_TREE_IMAGE" ]]; then
            prompt="About to update the device tree sector in '${BLOCK_DEVICE}${DISK_IMAGE}' with '$DEVICE_TREE_IMAGE'."$'\nAre you sure to continue?'
            ask_to_continue "$prompt" "$ASSUME_YES"

            DTB_OFFSET=4096
            DTB_SIZE=4096

            OF_DIR=$COMPONENTS_MAIN_OFFSET
            sudo dd if=/dev/zero of=${DEV_NAME} count=$DTB_SIZE seek=$[OF_DIR+DTB_OFFSET] bs=$sectorSize
            sudo dd if="${DEVICE_TREE_IMAGE}" of=${DEV_NAME} count=$DTB_SIZE seek=$[OF_DIR+DTB_OFFSET] bs=$sectorSize

            OF_DIR=$COMPONENTS_BACKUP_OFFSET
            sudo dd if=/dev/zero of=${DEV_NAME} count=$DTB_SIZE seek=$[OF_DIR+DTB_OFFSET] bs=$sectorSize
            sudo dd if="${DEVICE_TREE_IMAGE}" of=${DEV_NAME} count=$DTB_SIZE seek=$[OF_DIR+DTB_OFFSET] bs=$sectorSize
        fi

        if [[ -e "$KERNEL_IMAGE" ]]; then
            prompt="About to update the kernel sector in '${BLOCK_DEVICE}${DISK_IMAGE}' with '$KERNEL_IMAGE'."$'\nAre you sure to continue?'
            ask_to_continue "$prompt" "$ASSUME_YES"

            IMAGE_OFFSET=8192
            IMAGE_SIZE=65536

            OF_DIR=$COMPONENTS_MAIN_OFFSET
            sudo dd if=/dev/zero of="${DEV_NAME}" count=$IMAGE_SIZE seek=$(( OF_DIR+IMAGE_OFFSET )) bs=$sectorSize
            sudo dd if="${KERNEL_IMAGE}" of="${DEV_NAME}" count=$IMAGE_SIZE seek=$(( OF_DIR+IMAGE_OFFSET )) bs=$sectorSize

            OF_DIR=$COMPONENTS_BACKUP_OFFSET
            sudo dd if=/dev/zero of="${DEV_NAME}" count=$IMAGE_SIZE seek=$(( OF_DIR+IMAGE_OFFSET )) bs=$sectorSize
            sudo dd if="${KERNEL_IMAGE}" of="${DEV_NAME}" count=$IMAGE_SIZE seek=$(( OF_DIR+IMAGE_OFFSET )) bs=$sectorSize
        fi

    # catch
    ); set -e;

    # do some cleaning
    if [[ "$USER_CHOICE" == "DISK_IMAGE" && -e "$loop_dev" ]]; then
        echo "Detaching loop device '$loop_dev' from image file '$DISK_IMAGE'..."
        sudo losetup -d "$loop_dev"
        echo "[OK]"
    fi

    echo "Script execution finished."
}


main
